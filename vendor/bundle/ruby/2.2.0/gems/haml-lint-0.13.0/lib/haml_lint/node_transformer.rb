module HamlLint
  # Responsible for transforming {Haml::Parser::ParseNode} objects into
  # corresponding {HamlLint::Tree::Node} objects.
  #
  # The parse tree generated by HAML has a number of strange cases where certain
  # types of nodes are created that don't necessarily correspond to what one
  # would expect. This class is intended to isolate and handle these cases so
  # that linters don't have to deal with them.
  class NodeTransformer
    # Creates a node transformer for the given parser context.
    #
    # @param parser [HamlLint::Parser]
    def initialize(parser)
      @parser = parser
    end

    # Transforms the given {Haml::Parser::ParseNode} into its corresponding
    # {HamlLint::Tree::Node}.
    def transform(haml_node)
      node_class = "#{HamlLint::Utils.camel_case(haml_node.type.to_s)}Node"

      HamlLint::Tree.const_get(node_class).new(@parser, haml_node)
    rescue NameError
      # TODO: Wrap in parser error?
      raise
    end
  end
end
